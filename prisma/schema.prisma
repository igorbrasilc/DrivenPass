// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id          Int          @id @default(autoincrement())
    email       String       @unique
    password    String
    createdAt   DateTime     @default(now())
    updatedAt   DateTime     @updatedAt
    credentials Credential[]
    safeNotes   SafeNote[]
    cards       Card[]
    wifis       Wifi[]

    @@map("users")
}

model Credential {
    id        Int      @id @default(autoincrement())
    title     String   @db.VarChar(50)
    url       String
    username  String
    password  String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    userId    Int
    user      User     @relation(fields: [userId], references: [id])

    @@unique(fields: [userId, title])
    @@map("credentials")
}

model SafeNote {
    id        Int      @id @default(autoincrement())
    title     String   @db.VarChar(50)
    note      String   @db.VarChar(1000)
    userId    Int
    user      User     @relation(fields: [userId], references: [id])
    updatedAt DateTime @updatedAt
    createdAt DateTime @default(now())

    @@unique(fields: [userId, title])
    @@map("safeNotes")
}

model Card {
    id             Int       @id @default(autoincrement())
    title          String    @db.VarChar(50)
    number         Int
    username       String
    CVC            String
    expirationDate DateTime
    password       String
    isVirtual      Boolean
    userId         Int
    user           User      @relation(fields: [userId], references: [id])
    cardTypeId     Int
    cardType       CardType  @relation(fields: [cardTypeId], references: [id])
    createdAt      DateTime  @default(now())
    updatedAt      DateTime  @updatedAt

    @@unique(fields: [title, userId])
    @@map("cards")
}

model CardType {
    id        Int      @id @default(autoincrement())
    type      Type   @unique
    createdAt DateTime @default(now())
    cards     Card[]

    @@map("cardTypes")
}

enum Type {
    credit
    debit
    both
}

model Wifi {
    id          Int      @id @default(autoincrement())
    title       String
    networkName String
    password    String
    userId      Int
    user        User     @relation(fields: [userId], references: [id])
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    @@map("wifis")
}
